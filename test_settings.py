###############################################################################
# Filename: test_settings.py                                                   #
# Project: OpenPlains Inc.                                                     #
# File Created: Tuesday June 7th 2022                                          #
# Author: Corey White (smortopahri@gmail.com)                                  #
# Maintainer: Corey White                                                      #
# -----                                                                        #
# Last Modified: Thu Mar 21 2024                                               #
# Modified By: Corey White                                                     #
# -----                                                                        #
# License: GPLv3                                                               #
#                                                                              #
# Copyright (c) 2023 OpenPlains Inc.                                           #
#                                                                              #
# django-actinia is an open-source django app that allows for with             #
# the Actinia REST API for GRASS GIS for distributed computational tasks.      #
#                                                                              #
# This program is free software: you can redistribute it and/or modify         #
# it under the terms of the GNU General Public License as published by         #
# the Free Software Foundation, either version 3 of the License, or            #
# (at your option) any later version.                                          #
#                                                                              #
# This program is distributed in the hope that it will be useful,              #
# but WITHOUT ANY WARRANTY; without even the implied warranty of               #
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the                #
# GNU General Public License for more details.                                 #
#                                                                              #
# You should have received a copy of the GNU General Public License            #
# along with this program.  If not, see <https://www.gnu.org/licenses/>.       #
#                                                                              #
###############################################################################


"""
Django settings for api project.

Generated by 'django-admin startproject' using Django 3.2.8.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""

from pathlib import Path
import environ
import os
import logging

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# https://django-environ.readthedocs.io/en/latest/
# Take environment variables from .env file
env = environ.Env(
    # set casting, default value
    DEBUG=(bool, True)
)
# Initialise environment variables
environ.Env.read_env(os.path.join(".test.env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env("SECRET_KEY")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env("DEBUG")

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "daphne",
    "channels",
    "grass",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "django.contrib.gis",
    "corsheaders",
    "rest_framework",
    "rest_framework_gis",
    "django_filters",
    "django_extensions",
    "debug_toolbar",
    "drf_spectacular",
]


LOGGING = {
    "version": 1,
    "disable_existing_loggers": False,
    "handlers": {
        "console": {
            "class": "logging.StreamHandler",
        },
    },
    "root": {
        "handlers": ["console"],
        "level": "WARNING",
    },
    "loggers": {
        "django": {
            "handlers": ["console"],
            "level": env("DJANGO_LOG_LEVEL"),
            "propagate": True,
        },
    },
}

logging.config.dictConfig(LOGGING)


REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": [
        # 'oauth2_provider.contrib.rest_framework.OAuth2Authentication'
        "rest_framework.authentication.BasicAuthentication",
        # 'rest_framework.authentication.SessionAuthentication',
    ],
    # Use Django's standard `django.contrib.auth` permissions,
    # or allow read-only access for unauthenticated users.
    "DEFAULT_PERMISSION_CLASSES": [
        # 'rest_framework.permissions.IsAuthenticated'
        "rest_framework.permissions.DjangoModelPermissionsOrAnonReadOnly"
    ],
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 10,
    "DEFAULT_SCHEMA_CLASS": "drf_spectacular.openapi.AutoSchema",
}

SPECTACULAR_SETTINGS = {
    "TITLE": "Django-Actina API",
    "DESCRIPTION": "Djano-Actinia API for GRASS GIS",
    "VERSION": "1.0.0",
    "SERVE_INCLUDE_SCHEMA": False,
    # OTHER SETTINGS
}

# Add Later
AUTHENTICATION_BACKENDS = ("django.contrib.auth.backends.ModelBackend",)  # default


MIDDLEWARE = [
    "debug_toolbar.middleware.DebugToolbarMiddleware",
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

if DEBUG:
    import os  # only if you haven't already imported this
    import socket  # only if you haven't already imported this

    hostname, _, ips = socket.gethostbyname_ex(socket.gethostname())
    INTERNAL_IPS = [ip[:-1] + "1" for ip in ips] + ["127.0.0.1", "10.0.2.2"]

AUTH_USER_MODEL = "auth.User"

CORS_ALLOWED_ORIGINS = [
    "http://actinia-core:8088",
]
CORS_ORIGIN_ALLOW_ALL = True

# CORS_ALLOWED_ORIGIN_REGEXES are regular expressions that match domains
# that can make requests. This setting is especially useful if you have many domains.
# CORS_ALLOWED_ORIGIN_REGEXES = [
# r"^https://\w+\.domain\.com$",
# r"^http://\w+\localhost\:3000$",
# r"^http://\w+\actinia-core\:8088$",
# ]

# The CORS_URLS_REGEX setting restricts which URLs the server will
# send CORS headers to. It’s useful, for example, when you just want
# to send headers on part of your site. Here’s an example:
# CORS_URLS_REGEX = r'^/api/.*$'


CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "content-range",
    "dnt",
    "origin",
    "range",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

# CORS_EXPOSE_HEADERS is a list of headers exposed to the browser.
# The default is an empty array.
CORS_EXPOSE_HEADERS = []

# Defines the time in seconds a browswer can cache a header response to a
# preflight request. Deafualts to 86,400 (one day)
CORS_PREFLIGHT_MAX_AGE = 86400

# CORS_ALLOW_CREDENTIALS is a true or false value. So, its value determines whether the server
# allows cookies in the cross-site HTTP requests.
CORS_ALLOW_CREDENTIALS = True


CSRF_TRUSTED_ORIGINS = [
    "http://192.168.1.242:3000",
    "http://192.168.1.242:8005",
    "http://localhost:3000",
    "http://localhost:7000",
]


ROOT_URLCONF = "test_api.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [BASE_DIR / "test_api" / "templates"],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "test_api.wsgi.application"


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": env("POSTGRES_DBNAME"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": env("POSTGRES_HOST"),
        "PORT": env("POSTGRES_PORT"),
    },
    "actinia": {
        "ENGINE": "django.contrib.gis.db.backends.postgis",
        "NAME": env("ACTINIA_POSTGRES_DBNAME"),
        "USER": env("ACTINIA_POSTGRES_USER"),
        "PASSWORD": env("ACTINIA_POSTGRES_PASSWORD"),
        "HOST": env("POSTGRES_HOST"),
        "PORT": env("POSTGRES_PORT"),
    },
}

# CACHES
# https://django-redis-cache.readthedocs.io/en/latest/intro_quick_start.html
# https://docs.djangoproject.com/en/4.0/topics/cache/
# Running in Redis database 10
CACHES = {
    "default": {
        "BACKEND": "django.core.cache.backends.redis.RedisCache",
        "LOCATION": f'redis://{env("REDIS_USER")}:{env("REDIS_PASSWORD")}@django-redis-cache:6370',
        "OPTIONS": {
            "db": "10",
            "parser_class": "redis.connection.HiredisParser",
            "pool_class": "redis.BlockingConnectionPool",
        },
    }
}

# These are development values only never push to prod server.
ACTINIA = {
    "ACTINIA_USER": env("ACTINIA_USER"),
    "ACTINIA_PASSWORD": env("ACTINIA_PASSWORD"),
    "ACTINIA_VERSION": env("ACTINIA_VERSION"),
    "ACTINIA_BASEURL": env("ACTINIA_BASEURL"),
    "ACTINIA_LOCATION": env("ACTINIA_LOCATION"),
    "ACTINIA_MAPSET": env("ACTINIA_MAPSET"),
    "ACTINIA_SWAGGER_URL": env("ACTINIA_SWAGGER_URL"),
}
# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.0/howto/static-files/

# STATICFILES_DIRS = [
#     os.path.join(BASE_DIR, 'templates'),
#     # os.path.join(BASE_DIR, 'static'),
#     # os.path.join(BASE_DIR, "savana", "templates"),


CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = []

STATIC_ROOT = "/var/www/django-actinia/"
STATIC_URL = "/static/"

# Google Cloud Storage Settings
# https://django-storages.readthedocs.io/en/latest/backends/gcloud.html
# https://cloud.google.com/iam/docs/creating-managing-service-account-keys#iam-service-account-keys-create-gcloud
# STATIC_URL = f'https://storage.googleapis.com/{env("GS_BUCKET_NAME")}/'
# DEFAULT_FILE_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'
# GS_BUCKET_NAME = env('GS_BUCKET_NAME')
# GS_PROJECT_ID = env('GS_PROJECT_ID')
# GOOGLE_APPLICATION_CREDENTIALS = env('GOOGLE_APPLICATION_CREDENTIALS')

# STATICFILES_STORAGE = 'storages.backends.gcloud.GoogleCloudStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# Channels
# Running in Redis database 5
ASGI_APPLICATION = "test_api.asgi.application"
CHANNEL_LAYERS = {
    "default": {
        # 'BACKEND': 'channels.layers.InMemoryChannelLayer',
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [
                f'redis://{env("REDIS_USER")}:{env("REDIS_PASSWORD")}@django-redis-cache:6370/5'
            ],
        },
    },
}

# Celery
# Running in Databases 0 and 1
CELERY_BROKER_URL = (
    f'redis://{env("REDIS_USER")}:{env("REDIS_PASSWORD")}@django-redis-cache:6370/0'
)
CELERY_RESULT_BACKEND = (
    f'redis://{env("REDIS_USER")}:{env("REDIS_PASSWORD")}@django-redis-cache:6370/1'
)

os.environ["DJANGO_ALLOW_ASYNC_UNSAFE"] = "true"  # only use in development
